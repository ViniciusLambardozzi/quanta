// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/09/2018 13:52:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    quanta2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module quanta2_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module quanta2_vlg_check_tst (
	ALUResult,
	debug,
	immediate,
	instruction,
	opcode,
	pc,
	regA,
	regB,
	sampler_rx
);
input [31:0] ALUResult;
input [31:0] debug;
input [31:0] immediate;
input [31:0] instruction;
input [7:0] opcode;
input [31:0] pc;
input [31:0] regA;
input [31:0] regB;
input sampler_rx;

reg [31:0] ALUResult_expected;
reg [31:0] debug_expected;
reg [31:0] immediate_expected;
reg [31:0] instruction_expected;
reg [7:0] opcode_expected;
reg [31:0] pc_expected;
reg [31:0] regA_expected;
reg [31:0] regB_expected;

reg [31:0] ALUResult_prev;
reg [31:0] debug_prev;
reg [31:0] immediate_prev;
reg [31:0] instruction_prev;
reg [7:0] opcode_prev;
reg [31:0] pc_prev;
reg [31:0] regA_prev;
reg [31:0] regB_prev;

reg [31:0] ALUResult_expected_prev;
reg [31:0] debug_expected_prev;
reg [31:0] immediate_expected_prev;
reg [31:0] instruction_expected_prev;
reg [7:0] opcode_expected_prev;
reg [31:0] pc_expected_prev;
reg [31:0] regA_expected_prev;
reg [31:0] regB_expected_prev;

reg [31:0] last_ALUResult_exp;
reg [31:0] last_debug_exp;
reg [31:0] last_immediate_exp;
reg [31:0] last_instruction_exp;
reg [7:0] last_opcode_exp;
reg [31:0] last_pc_exp;
reg [31:0] last_regA_exp;
reg [31:0] last_regB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUResult_prev = ALUResult;
	debug_prev = debug;
	immediate_prev = immediate;
	instruction_prev = instruction;
	opcode_prev = opcode;
	pc_prev = pc;
	regA_prev = regA;
	regB_prev = regB;
end

// update expected /o prevs

always @(trigger)
begin
	ALUResult_expected_prev = ALUResult_expected;
	debug_expected_prev = debug_expected;
	immediate_expected_prev = immediate_expected;
	instruction_expected_prev = instruction_expected;
	opcode_expected_prev = opcode_expected;
	pc_expected_prev = pc_expected;
	regA_expected_prev = regA_expected;
	regB_expected_prev = regB_expected;
end


// expected instruction[ 31 ]
initial
begin
	instruction_expected[31] = 1'bX;
end 
// expected instruction[ 30 ]
initial
begin
	instruction_expected[30] = 1'bX;
end 
// expected instruction[ 29 ]
initial
begin
	instruction_expected[29] = 1'bX;
end 
// expected instruction[ 28 ]
initial
begin
	instruction_expected[28] = 1'bX;
end 
// expected instruction[ 27 ]
initial
begin
	instruction_expected[27] = 1'bX;
end 
// expected instruction[ 26 ]
initial
begin
	instruction_expected[26] = 1'bX;
end 
// expected instruction[ 25 ]
initial
begin
	instruction_expected[25] = 1'bX;
end 
// expected instruction[ 24 ]
initial
begin
	instruction_expected[24] = 1'bX;
end 
// expected instruction[ 23 ]
initial
begin
	instruction_expected[23] = 1'bX;
end 
// expected instruction[ 22 ]
initial
begin
	instruction_expected[22] = 1'bX;
end 
// expected instruction[ 21 ]
initial
begin
	instruction_expected[21] = 1'bX;
end 
// expected instruction[ 20 ]
initial
begin
	instruction_expected[20] = 1'bX;
end 
// expected instruction[ 19 ]
initial
begin
	instruction_expected[19] = 1'bX;
end 
// expected instruction[ 18 ]
initial
begin
	instruction_expected[18] = 1'bX;
end 
// expected instruction[ 17 ]
initial
begin
	instruction_expected[17] = 1'bX;
end 
// expected instruction[ 16 ]
initial
begin
	instruction_expected[16] = 1'bX;
end 
// expected instruction[ 15 ]
initial
begin
	instruction_expected[15] = 1'bX;
end 
// expected instruction[ 14 ]
initial
begin
	instruction_expected[14] = 1'bX;
end 
// expected instruction[ 13 ]
initial
begin
	instruction_expected[13] = 1'bX;
end 
// expected instruction[ 12 ]
initial
begin
	instruction_expected[12] = 1'bX;
end 
// expected instruction[ 11 ]
initial
begin
	instruction_expected[11] = 1'bX;
end 
// expected instruction[ 10 ]
initial
begin
	instruction_expected[10] = 1'bX;
end 
// expected instruction[ 9 ]
initial
begin
	instruction_expected[9] = 1'bX;
end 
// expected instruction[ 8 ]
initial
begin
	instruction_expected[8] = 1'bX;
end 
// expected instruction[ 7 ]
initial
begin
	instruction_expected[7] = 1'bX;
end 
// expected instruction[ 6 ]
initial
begin
	instruction_expected[6] = 1'bX;
end 
// expected instruction[ 5 ]
initial
begin
	instruction_expected[5] = 1'bX;
end 
// expected instruction[ 4 ]
initial
begin
	instruction_expected[4] = 1'bX;
end 
// expected instruction[ 3 ]
initial
begin
	instruction_expected[3] = 1'bX;
end 
// expected instruction[ 2 ]
initial
begin
	instruction_expected[2] = 1'bX;
end 
// expected instruction[ 1 ]
initial
begin
	instruction_expected[1] = 1'bX;
end 
// expected instruction[ 0 ]
initial
begin
	instruction_expected[0] = 1'bX;
end 
// expected ALUResult[ 31 ]
initial
begin
	ALUResult_expected[31] = 1'bX;
end 
// expected ALUResult[ 30 ]
initial
begin
	ALUResult_expected[30] = 1'bX;
end 
// expected ALUResult[ 29 ]
initial
begin
	ALUResult_expected[29] = 1'bX;
end 
// expected ALUResult[ 28 ]
initial
begin
	ALUResult_expected[28] = 1'bX;
end 
// expected ALUResult[ 27 ]
initial
begin
	ALUResult_expected[27] = 1'bX;
end 
// expected ALUResult[ 26 ]
initial
begin
	ALUResult_expected[26] = 1'bX;
end 
// expected ALUResult[ 25 ]
initial
begin
	ALUResult_expected[25] = 1'bX;
end 
// expected ALUResult[ 24 ]
initial
begin
	ALUResult_expected[24] = 1'bX;
end 
// expected ALUResult[ 23 ]
initial
begin
	ALUResult_expected[23] = 1'bX;
end 
// expected ALUResult[ 22 ]
initial
begin
	ALUResult_expected[22] = 1'bX;
end 
// expected ALUResult[ 21 ]
initial
begin
	ALUResult_expected[21] = 1'bX;
end 
// expected ALUResult[ 20 ]
initial
begin
	ALUResult_expected[20] = 1'bX;
end 
// expected ALUResult[ 19 ]
initial
begin
	ALUResult_expected[19] = 1'bX;
end 
// expected ALUResult[ 18 ]
initial
begin
	ALUResult_expected[18] = 1'bX;
end 
// expected ALUResult[ 17 ]
initial
begin
	ALUResult_expected[17] = 1'bX;
end 
// expected ALUResult[ 16 ]
initial
begin
	ALUResult_expected[16] = 1'bX;
end 
// expected ALUResult[ 15 ]
initial
begin
	ALUResult_expected[15] = 1'bX;
end 
// expected ALUResult[ 14 ]
initial
begin
	ALUResult_expected[14] = 1'bX;
end 
// expected ALUResult[ 13 ]
initial
begin
	ALUResult_expected[13] = 1'bX;
end 
// expected ALUResult[ 12 ]
initial
begin
	ALUResult_expected[12] = 1'bX;
end 
// expected ALUResult[ 11 ]
initial
begin
	ALUResult_expected[11] = 1'bX;
end 
// expected ALUResult[ 10 ]
initial
begin
	ALUResult_expected[10] = 1'bX;
end 
// expected ALUResult[ 9 ]
initial
begin
	ALUResult_expected[9] = 1'bX;
end 
// expected ALUResult[ 8 ]
initial
begin
	ALUResult_expected[8] = 1'bX;
end 
// expected ALUResult[ 7 ]
initial
begin
	ALUResult_expected[7] = 1'bX;
end 
// expected ALUResult[ 6 ]
initial
begin
	ALUResult_expected[6] = 1'bX;
end 
// expected ALUResult[ 5 ]
initial
begin
	ALUResult_expected[5] = 1'bX;
end 
// expected ALUResult[ 4 ]
initial
begin
	ALUResult_expected[4] = 1'bX;
end 
// expected ALUResult[ 3 ]
initial
begin
	ALUResult_expected[3] = 1'bX;
end 
// expected ALUResult[ 2 ]
initial
begin
	ALUResult_expected[2] = 1'bX;
end 
// expected ALUResult[ 1 ]
initial
begin
	ALUResult_expected[1] = 1'bX;
end 
// expected ALUResult[ 0 ]
initial
begin
	ALUResult_expected[0] = 1'bX;
end 
// expected immediate[ 31 ]
initial
begin
	immediate_expected[31] = 1'bX;
end 
// expected immediate[ 30 ]
initial
begin
	immediate_expected[30] = 1'bX;
end 
// expected immediate[ 29 ]
initial
begin
	immediate_expected[29] = 1'bX;
end 
// expected immediate[ 28 ]
initial
begin
	immediate_expected[28] = 1'bX;
end 
// expected immediate[ 27 ]
initial
begin
	immediate_expected[27] = 1'bX;
end 
// expected immediate[ 26 ]
initial
begin
	immediate_expected[26] = 1'bX;
end 
// expected immediate[ 25 ]
initial
begin
	immediate_expected[25] = 1'bX;
end 
// expected immediate[ 24 ]
initial
begin
	immediate_expected[24] = 1'bX;
end 
// expected immediate[ 23 ]
initial
begin
	immediate_expected[23] = 1'bX;
end 
// expected immediate[ 22 ]
initial
begin
	immediate_expected[22] = 1'bX;
end 
// expected immediate[ 21 ]
initial
begin
	immediate_expected[21] = 1'bX;
end 
// expected immediate[ 20 ]
initial
begin
	immediate_expected[20] = 1'bX;
end 
// expected immediate[ 19 ]
initial
begin
	immediate_expected[19] = 1'bX;
end 
// expected immediate[ 18 ]
initial
begin
	immediate_expected[18] = 1'bX;
end 
// expected immediate[ 17 ]
initial
begin
	immediate_expected[17] = 1'bX;
end 
// expected immediate[ 16 ]
initial
begin
	immediate_expected[16] = 1'bX;
end 
// expected immediate[ 15 ]
initial
begin
	immediate_expected[15] = 1'bX;
end 
// expected immediate[ 14 ]
initial
begin
	immediate_expected[14] = 1'bX;
end 
// expected immediate[ 13 ]
initial
begin
	immediate_expected[13] = 1'bX;
end 
// expected immediate[ 12 ]
initial
begin
	immediate_expected[12] = 1'bX;
end 
// expected immediate[ 11 ]
initial
begin
	immediate_expected[11] = 1'bX;
end 
// expected immediate[ 10 ]
initial
begin
	immediate_expected[10] = 1'bX;
end 
// expected immediate[ 9 ]
initial
begin
	immediate_expected[9] = 1'bX;
end 
// expected immediate[ 8 ]
initial
begin
	immediate_expected[8] = 1'bX;
end 
// expected immediate[ 7 ]
initial
begin
	immediate_expected[7] = 1'bX;
end 
// expected immediate[ 6 ]
initial
begin
	immediate_expected[6] = 1'bX;
end 
// expected immediate[ 5 ]
initial
begin
	immediate_expected[5] = 1'bX;
end 
// expected immediate[ 4 ]
initial
begin
	immediate_expected[4] = 1'bX;
end 
// expected immediate[ 3 ]
initial
begin
	immediate_expected[3] = 1'bX;
end 
// expected immediate[ 2 ]
initial
begin
	immediate_expected[2] = 1'bX;
end 
// expected immediate[ 1 ]
initial
begin
	immediate_expected[1] = 1'bX;
end 
// expected immediate[ 0 ]
initial
begin
	immediate_expected[0] = 1'bX;
end 
// expected regA[ 31 ]
initial
begin
	regA_expected[31] = 1'bX;
end 
// expected regA[ 30 ]
initial
begin
	regA_expected[30] = 1'bX;
end 
// expected regA[ 29 ]
initial
begin
	regA_expected[29] = 1'bX;
end 
// expected regA[ 28 ]
initial
begin
	regA_expected[28] = 1'bX;
end 
// expected regA[ 27 ]
initial
begin
	regA_expected[27] = 1'bX;
end 
// expected regA[ 26 ]
initial
begin
	regA_expected[26] = 1'bX;
end 
// expected regA[ 25 ]
initial
begin
	regA_expected[25] = 1'bX;
end 
// expected regA[ 24 ]
initial
begin
	regA_expected[24] = 1'bX;
end 
// expected regA[ 23 ]
initial
begin
	regA_expected[23] = 1'bX;
end 
// expected regA[ 22 ]
initial
begin
	regA_expected[22] = 1'bX;
end 
// expected regA[ 21 ]
initial
begin
	regA_expected[21] = 1'bX;
end 
// expected regA[ 20 ]
initial
begin
	regA_expected[20] = 1'bX;
end 
// expected regA[ 19 ]
initial
begin
	regA_expected[19] = 1'bX;
end 
// expected regA[ 18 ]
initial
begin
	regA_expected[18] = 1'bX;
end 
// expected regA[ 17 ]
initial
begin
	regA_expected[17] = 1'bX;
end 
// expected regA[ 16 ]
initial
begin
	regA_expected[16] = 1'bX;
end 
// expected regA[ 15 ]
initial
begin
	regA_expected[15] = 1'bX;
end 
// expected regA[ 14 ]
initial
begin
	regA_expected[14] = 1'bX;
end 
// expected regA[ 13 ]
initial
begin
	regA_expected[13] = 1'bX;
end 
// expected regA[ 12 ]
initial
begin
	regA_expected[12] = 1'bX;
end 
// expected regA[ 11 ]
initial
begin
	regA_expected[11] = 1'bX;
end 
// expected regA[ 10 ]
initial
begin
	regA_expected[10] = 1'bX;
end 
// expected regA[ 9 ]
initial
begin
	regA_expected[9] = 1'bX;
end 
// expected regA[ 8 ]
initial
begin
	regA_expected[8] = 1'bX;
end 
// expected regA[ 7 ]
initial
begin
	regA_expected[7] = 1'bX;
end 
// expected regA[ 6 ]
initial
begin
	regA_expected[6] = 1'bX;
end 
// expected regA[ 5 ]
initial
begin
	regA_expected[5] = 1'bX;
end 
// expected regA[ 4 ]
initial
begin
	regA_expected[4] = 1'bX;
end 
// expected regA[ 3 ]
initial
begin
	regA_expected[3] = 1'bX;
end 
// expected regA[ 2 ]
initial
begin
	regA_expected[2] = 1'bX;
end 
// expected regA[ 1 ]
initial
begin
	regA_expected[1] = 1'bX;
end 
// expected regA[ 0 ]
initial
begin
	regA_expected[0] = 1'bX;
end 
// expected regB[ 31 ]
initial
begin
	regB_expected[31] = 1'bX;
end 
// expected regB[ 30 ]
initial
begin
	regB_expected[30] = 1'bX;
end 
// expected regB[ 29 ]
initial
begin
	regB_expected[29] = 1'bX;
end 
// expected regB[ 28 ]
initial
begin
	regB_expected[28] = 1'bX;
end 
// expected regB[ 27 ]
initial
begin
	regB_expected[27] = 1'bX;
end 
// expected regB[ 26 ]
initial
begin
	regB_expected[26] = 1'bX;
end 
// expected regB[ 25 ]
initial
begin
	regB_expected[25] = 1'bX;
end 
// expected regB[ 24 ]
initial
begin
	regB_expected[24] = 1'bX;
end 
// expected regB[ 23 ]
initial
begin
	regB_expected[23] = 1'bX;
end 
// expected regB[ 22 ]
initial
begin
	regB_expected[22] = 1'bX;
end 
// expected regB[ 21 ]
initial
begin
	regB_expected[21] = 1'bX;
end 
// expected regB[ 20 ]
initial
begin
	regB_expected[20] = 1'bX;
end 
// expected regB[ 19 ]
initial
begin
	regB_expected[19] = 1'bX;
end 
// expected regB[ 18 ]
initial
begin
	regB_expected[18] = 1'bX;
end 
// expected regB[ 17 ]
initial
begin
	regB_expected[17] = 1'bX;
end 
// expected regB[ 16 ]
initial
begin
	regB_expected[16] = 1'bX;
end 
// expected regB[ 15 ]
initial
begin
	regB_expected[15] = 1'bX;
end 
// expected regB[ 14 ]
initial
begin
	regB_expected[14] = 1'bX;
end 
// expected regB[ 13 ]
initial
begin
	regB_expected[13] = 1'bX;
end 
// expected regB[ 12 ]
initial
begin
	regB_expected[12] = 1'bX;
end 
// expected regB[ 11 ]
initial
begin
	regB_expected[11] = 1'bX;
end 
// expected regB[ 10 ]
initial
begin
	regB_expected[10] = 1'bX;
end 
// expected regB[ 9 ]
initial
begin
	regB_expected[9] = 1'bX;
end 
// expected regB[ 8 ]
initial
begin
	regB_expected[8] = 1'bX;
end 
// expected regB[ 7 ]
initial
begin
	regB_expected[7] = 1'bX;
end 
// expected regB[ 6 ]
initial
begin
	regB_expected[6] = 1'bX;
end 
// expected regB[ 5 ]
initial
begin
	regB_expected[5] = 1'bX;
end 
// expected regB[ 4 ]
initial
begin
	regB_expected[4] = 1'bX;
end 
// expected regB[ 3 ]
initial
begin
	regB_expected[3] = 1'bX;
end 
// expected regB[ 2 ]
initial
begin
	regB_expected[2] = 1'bX;
end 
// expected regB[ 1 ]
initial
begin
	regB_expected[1] = 1'bX;
end 
// expected regB[ 0 ]
initial
begin
	regB_expected[0] = 1'bX;
end 
// expected debug[ 31 ]
initial
begin
	debug_expected[31] = 1'bX;
end 
// expected debug[ 30 ]
initial
begin
	debug_expected[30] = 1'bX;
end 
// expected debug[ 29 ]
initial
begin
	debug_expected[29] = 1'bX;
end 
// expected debug[ 28 ]
initial
begin
	debug_expected[28] = 1'bX;
end 
// expected debug[ 27 ]
initial
begin
	debug_expected[27] = 1'bX;
end 
// expected debug[ 26 ]
initial
begin
	debug_expected[26] = 1'bX;
end 
// expected debug[ 25 ]
initial
begin
	debug_expected[25] = 1'bX;
end 
// expected debug[ 24 ]
initial
begin
	debug_expected[24] = 1'bX;
end 
// expected debug[ 23 ]
initial
begin
	debug_expected[23] = 1'bX;
end 
// expected debug[ 22 ]
initial
begin
	debug_expected[22] = 1'bX;
end 
// expected debug[ 21 ]
initial
begin
	debug_expected[21] = 1'bX;
end 
// expected debug[ 20 ]
initial
begin
	debug_expected[20] = 1'bX;
end 
// expected debug[ 19 ]
initial
begin
	debug_expected[19] = 1'bX;
end 
// expected debug[ 18 ]
initial
begin
	debug_expected[18] = 1'bX;
end 
// expected debug[ 17 ]
initial
begin
	debug_expected[17] = 1'bX;
end 
// expected debug[ 16 ]
initial
begin
	debug_expected[16] = 1'bX;
end 
// expected debug[ 15 ]
initial
begin
	debug_expected[15] = 1'bX;
end 
// expected debug[ 14 ]
initial
begin
	debug_expected[14] = 1'bX;
end 
// expected debug[ 13 ]
initial
begin
	debug_expected[13] = 1'bX;
end 
// expected debug[ 12 ]
initial
begin
	debug_expected[12] = 1'bX;
end 
// expected debug[ 11 ]
initial
begin
	debug_expected[11] = 1'bX;
end 
// expected debug[ 10 ]
initial
begin
	debug_expected[10] = 1'bX;
end 
// expected debug[ 9 ]
initial
begin
	debug_expected[9] = 1'bX;
end 
// expected debug[ 8 ]
initial
begin
	debug_expected[8] = 1'bX;
end 
// expected debug[ 7 ]
initial
begin
	debug_expected[7] = 1'bX;
end 
// expected debug[ 6 ]
initial
begin
	debug_expected[6] = 1'bX;
end 
// expected debug[ 5 ]
initial
begin
	debug_expected[5] = 1'bX;
end 
// expected debug[ 4 ]
initial
begin
	debug_expected[4] = 1'bX;
end 
// expected debug[ 3 ]
initial
begin
	debug_expected[3] = 1'bX;
end 
// expected debug[ 2 ]
initial
begin
	debug_expected[2] = 1'bX;
end 
// expected debug[ 1 ]
initial
begin
	debug_expected[1] = 1'bX;
end 
// expected debug[ 0 ]
initial
begin
	debug_expected[0] = 1'bX;
end 
// expected pc[ 31 ]
initial
begin
	pc_expected[31] = 1'bX;
end 
// expected pc[ 30 ]
initial
begin
	pc_expected[30] = 1'bX;
end 
// expected pc[ 29 ]
initial
begin
	pc_expected[29] = 1'bX;
end 
// expected pc[ 28 ]
initial
begin
	pc_expected[28] = 1'bX;
end 
// expected pc[ 27 ]
initial
begin
	pc_expected[27] = 1'bX;
end 
// expected pc[ 26 ]
initial
begin
	pc_expected[26] = 1'bX;
end 
// expected pc[ 25 ]
initial
begin
	pc_expected[25] = 1'bX;
end 
// expected pc[ 24 ]
initial
begin
	pc_expected[24] = 1'bX;
end 
// expected pc[ 23 ]
initial
begin
	pc_expected[23] = 1'bX;
end 
// expected pc[ 22 ]
initial
begin
	pc_expected[22] = 1'bX;
end 
// expected pc[ 21 ]
initial
begin
	pc_expected[21] = 1'bX;
end 
// expected pc[ 20 ]
initial
begin
	pc_expected[20] = 1'bX;
end 
// expected pc[ 19 ]
initial
begin
	pc_expected[19] = 1'bX;
end 
// expected pc[ 18 ]
initial
begin
	pc_expected[18] = 1'bX;
end 
// expected pc[ 17 ]
initial
begin
	pc_expected[17] = 1'bX;
end 
// expected pc[ 16 ]
initial
begin
	pc_expected[16] = 1'bX;
end 
// expected pc[ 15 ]
initial
begin
	pc_expected[15] = 1'bX;
end 
// expected pc[ 14 ]
initial
begin
	pc_expected[14] = 1'bX;
end 
// expected pc[ 13 ]
initial
begin
	pc_expected[13] = 1'bX;
end 
// expected pc[ 12 ]
initial
begin
	pc_expected[12] = 1'bX;
end 
// expected pc[ 11 ]
initial
begin
	pc_expected[11] = 1'bX;
end 
// expected pc[ 10 ]
initial
begin
	pc_expected[10] = 1'bX;
end 
// expected pc[ 9 ]
initial
begin
	pc_expected[9] = 1'bX;
end 
// expected pc[ 8 ]
initial
begin
	pc_expected[8] = 1'bX;
end 
// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'bX;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'bX;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'bX;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'bX;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
end 
// expected opcode[ 7 ]
initial
begin
	opcode_expected[7] = 1'bX;
end 
// expected opcode[ 6 ]
initial
begin
	opcode_expected[6] = 1'bX;
end 
// expected opcode[ 5 ]
initial
begin
	opcode_expected[5] = 1'bX;
end 
// expected opcode[ 4 ]
initial
begin
	opcode_expected[4] = 1'bX;
end 
// expected opcode[ 3 ]
initial
begin
	opcode_expected[3] = 1'bX;
end 
// expected opcode[ 2 ]
initial
begin
	opcode_expected[2] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	opcode_expected[1] = 1'bX;
end 
// expected opcode[ 0 ]
initial
begin
	opcode_expected[0] = 1'bX;
end 
// generate trigger
always @(ALUResult_expected or ALUResult or debug_expected or debug or immediate_expected or immediate or instruction_expected or instruction or opcode_expected or opcode or pc_expected or pc or regA_expected or regA or regB_expected or regB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUResult = %b | expected debug = %b | expected immediate = %b | expected instruction = %b | expected opcode = %b | expected pc = %b | expected regA = %b | expected regB = %b | ",ALUResult_expected_prev,debug_expected_prev,immediate_expected_prev,instruction_expected_prev,opcode_expected_prev,pc_expected_prev,regA_expected_prev,regB_expected_prev);
	$display("| real ALUResult = %b | real debug = %b | real immediate = %b | real instruction = %b | real opcode = %b | real pc = %b | real regA = %b | real regB = %b | ",ALUResult_prev,debug_prev,immediate_prev,instruction_prev,opcode_prev,pc_prev,regA_prev,regB_prev);
`endif
	if (
		( ALUResult_expected_prev[0] !== 1'bx ) && ( ALUResult_prev[0] !== ALUResult_expected_prev[0] )
		&& ((ALUResult_expected_prev[0] !== last_ALUResult_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[0] = ALUResult_expected_prev[0];
	end
	if (
		( ALUResult_expected_prev[1] !== 1'bx ) && ( ALUResult_prev[1] !== ALUResult_expected_prev[1] )
		&& ((ALUResult_expected_prev[1] !== last_ALUResult_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[1] = ALUResult_expected_prev[1];
	end
	if (
		( ALUResult_expected_prev[2] !== 1'bx ) && ( ALUResult_prev[2] !== ALUResult_expected_prev[2] )
		&& ((ALUResult_expected_prev[2] !== last_ALUResult_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[2] = ALUResult_expected_prev[2];
	end
	if (
		( ALUResult_expected_prev[3] !== 1'bx ) && ( ALUResult_prev[3] !== ALUResult_expected_prev[3] )
		&& ((ALUResult_expected_prev[3] !== last_ALUResult_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[3] = ALUResult_expected_prev[3];
	end
	if (
		( ALUResult_expected_prev[4] !== 1'bx ) && ( ALUResult_prev[4] !== ALUResult_expected_prev[4] )
		&& ((ALUResult_expected_prev[4] !== last_ALUResult_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[4] = ALUResult_expected_prev[4];
	end
	if (
		( ALUResult_expected_prev[5] !== 1'bx ) && ( ALUResult_prev[5] !== ALUResult_expected_prev[5] )
		&& ((ALUResult_expected_prev[5] !== last_ALUResult_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[5] = ALUResult_expected_prev[5];
	end
	if (
		( ALUResult_expected_prev[6] !== 1'bx ) && ( ALUResult_prev[6] !== ALUResult_expected_prev[6] )
		&& ((ALUResult_expected_prev[6] !== last_ALUResult_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[6] = ALUResult_expected_prev[6];
	end
	if (
		( ALUResult_expected_prev[7] !== 1'bx ) && ( ALUResult_prev[7] !== ALUResult_expected_prev[7] )
		&& ((ALUResult_expected_prev[7] !== last_ALUResult_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[7] = ALUResult_expected_prev[7];
	end
	if (
		( ALUResult_expected_prev[8] !== 1'bx ) && ( ALUResult_prev[8] !== ALUResult_expected_prev[8] )
		&& ((ALUResult_expected_prev[8] !== last_ALUResult_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[8] = ALUResult_expected_prev[8];
	end
	if (
		( ALUResult_expected_prev[9] !== 1'bx ) && ( ALUResult_prev[9] !== ALUResult_expected_prev[9] )
		&& ((ALUResult_expected_prev[9] !== last_ALUResult_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[9] = ALUResult_expected_prev[9];
	end
	if (
		( ALUResult_expected_prev[10] !== 1'bx ) && ( ALUResult_prev[10] !== ALUResult_expected_prev[10] )
		&& ((ALUResult_expected_prev[10] !== last_ALUResult_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[10] = ALUResult_expected_prev[10];
	end
	if (
		( ALUResult_expected_prev[11] !== 1'bx ) && ( ALUResult_prev[11] !== ALUResult_expected_prev[11] )
		&& ((ALUResult_expected_prev[11] !== last_ALUResult_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[11] = ALUResult_expected_prev[11];
	end
	if (
		( ALUResult_expected_prev[12] !== 1'bx ) && ( ALUResult_prev[12] !== ALUResult_expected_prev[12] )
		&& ((ALUResult_expected_prev[12] !== last_ALUResult_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[12] = ALUResult_expected_prev[12];
	end
	if (
		( ALUResult_expected_prev[13] !== 1'bx ) && ( ALUResult_prev[13] !== ALUResult_expected_prev[13] )
		&& ((ALUResult_expected_prev[13] !== last_ALUResult_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[13] = ALUResult_expected_prev[13];
	end
	if (
		( ALUResult_expected_prev[14] !== 1'bx ) && ( ALUResult_prev[14] !== ALUResult_expected_prev[14] )
		&& ((ALUResult_expected_prev[14] !== last_ALUResult_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[14] = ALUResult_expected_prev[14];
	end
	if (
		( ALUResult_expected_prev[15] !== 1'bx ) && ( ALUResult_prev[15] !== ALUResult_expected_prev[15] )
		&& ((ALUResult_expected_prev[15] !== last_ALUResult_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[15] = ALUResult_expected_prev[15];
	end
	if (
		( ALUResult_expected_prev[16] !== 1'bx ) && ( ALUResult_prev[16] !== ALUResult_expected_prev[16] )
		&& ((ALUResult_expected_prev[16] !== last_ALUResult_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[16] = ALUResult_expected_prev[16];
	end
	if (
		( ALUResult_expected_prev[17] !== 1'bx ) && ( ALUResult_prev[17] !== ALUResult_expected_prev[17] )
		&& ((ALUResult_expected_prev[17] !== last_ALUResult_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[17] = ALUResult_expected_prev[17];
	end
	if (
		( ALUResult_expected_prev[18] !== 1'bx ) && ( ALUResult_prev[18] !== ALUResult_expected_prev[18] )
		&& ((ALUResult_expected_prev[18] !== last_ALUResult_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[18] = ALUResult_expected_prev[18];
	end
	if (
		( ALUResult_expected_prev[19] !== 1'bx ) && ( ALUResult_prev[19] !== ALUResult_expected_prev[19] )
		&& ((ALUResult_expected_prev[19] !== last_ALUResult_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[19] = ALUResult_expected_prev[19];
	end
	if (
		( ALUResult_expected_prev[20] !== 1'bx ) && ( ALUResult_prev[20] !== ALUResult_expected_prev[20] )
		&& ((ALUResult_expected_prev[20] !== last_ALUResult_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[20] = ALUResult_expected_prev[20];
	end
	if (
		( ALUResult_expected_prev[21] !== 1'bx ) && ( ALUResult_prev[21] !== ALUResult_expected_prev[21] )
		&& ((ALUResult_expected_prev[21] !== last_ALUResult_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[21] = ALUResult_expected_prev[21];
	end
	if (
		( ALUResult_expected_prev[22] !== 1'bx ) && ( ALUResult_prev[22] !== ALUResult_expected_prev[22] )
		&& ((ALUResult_expected_prev[22] !== last_ALUResult_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[22] = ALUResult_expected_prev[22];
	end
	if (
		( ALUResult_expected_prev[23] !== 1'bx ) && ( ALUResult_prev[23] !== ALUResult_expected_prev[23] )
		&& ((ALUResult_expected_prev[23] !== last_ALUResult_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[23] = ALUResult_expected_prev[23];
	end
	if (
		( ALUResult_expected_prev[24] !== 1'bx ) && ( ALUResult_prev[24] !== ALUResult_expected_prev[24] )
		&& ((ALUResult_expected_prev[24] !== last_ALUResult_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[24] = ALUResult_expected_prev[24];
	end
	if (
		( ALUResult_expected_prev[25] !== 1'bx ) && ( ALUResult_prev[25] !== ALUResult_expected_prev[25] )
		&& ((ALUResult_expected_prev[25] !== last_ALUResult_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[25] = ALUResult_expected_prev[25];
	end
	if (
		( ALUResult_expected_prev[26] !== 1'bx ) && ( ALUResult_prev[26] !== ALUResult_expected_prev[26] )
		&& ((ALUResult_expected_prev[26] !== last_ALUResult_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[26] = ALUResult_expected_prev[26];
	end
	if (
		( ALUResult_expected_prev[27] !== 1'bx ) && ( ALUResult_prev[27] !== ALUResult_expected_prev[27] )
		&& ((ALUResult_expected_prev[27] !== last_ALUResult_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[27] = ALUResult_expected_prev[27];
	end
	if (
		( ALUResult_expected_prev[28] !== 1'bx ) && ( ALUResult_prev[28] !== ALUResult_expected_prev[28] )
		&& ((ALUResult_expected_prev[28] !== last_ALUResult_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[28] = ALUResult_expected_prev[28];
	end
	if (
		( ALUResult_expected_prev[29] !== 1'bx ) && ( ALUResult_prev[29] !== ALUResult_expected_prev[29] )
		&& ((ALUResult_expected_prev[29] !== last_ALUResult_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[29] = ALUResult_expected_prev[29];
	end
	if (
		( ALUResult_expected_prev[30] !== 1'bx ) && ( ALUResult_prev[30] !== ALUResult_expected_prev[30] )
		&& ((ALUResult_expected_prev[30] !== last_ALUResult_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[30] = ALUResult_expected_prev[30];
	end
	if (
		( ALUResult_expected_prev[31] !== 1'bx ) && ( ALUResult_prev[31] !== ALUResult_expected_prev[31] )
		&& ((ALUResult_expected_prev[31] !== last_ALUResult_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[31] = ALUResult_expected_prev[31];
	end
	if (
		( debug_expected_prev[0] !== 1'bx ) && ( debug_prev[0] !== debug_expected_prev[0] )
		&& ((debug_expected_prev[0] !== last_debug_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[0] = debug_expected_prev[0];
	end
	if (
		( debug_expected_prev[1] !== 1'bx ) && ( debug_prev[1] !== debug_expected_prev[1] )
		&& ((debug_expected_prev[1] !== last_debug_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[1] = debug_expected_prev[1];
	end
	if (
		( debug_expected_prev[2] !== 1'bx ) && ( debug_prev[2] !== debug_expected_prev[2] )
		&& ((debug_expected_prev[2] !== last_debug_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[2] = debug_expected_prev[2];
	end
	if (
		( debug_expected_prev[3] !== 1'bx ) && ( debug_prev[3] !== debug_expected_prev[3] )
		&& ((debug_expected_prev[3] !== last_debug_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[3] = debug_expected_prev[3];
	end
	if (
		( debug_expected_prev[4] !== 1'bx ) && ( debug_prev[4] !== debug_expected_prev[4] )
		&& ((debug_expected_prev[4] !== last_debug_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[4] = debug_expected_prev[4];
	end
	if (
		( debug_expected_prev[5] !== 1'bx ) && ( debug_prev[5] !== debug_expected_prev[5] )
		&& ((debug_expected_prev[5] !== last_debug_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[5] = debug_expected_prev[5];
	end
	if (
		( debug_expected_prev[6] !== 1'bx ) && ( debug_prev[6] !== debug_expected_prev[6] )
		&& ((debug_expected_prev[6] !== last_debug_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[6] = debug_expected_prev[6];
	end
	if (
		( debug_expected_prev[7] !== 1'bx ) && ( debug_prev[7] !== debug_expected_prev[7] )
		&& ((debug_expected_prev[7] !== last_debug_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[7] = debug_expected_prev[7];
	end
	if (
		( debug_expected_prev[8] !== 1'bx ) && ( debug_prev[8] !== debug_expected_prev[8] )
		&& ((debug_expected_prev[8] !== last_debug_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[8] = debug_expected_prev[8];
	end
	if (
		( debug_expected_prev[9] !== 1'bx ) && ( debug_prev[9] !== debug_expected_prev[9] )
		&& ((debug_expected_prev[9] !== last_debug_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[9] = debug_expected_prev[9];
	end
	if (
		( debug_expected_prev[10] !== 1'bx ) && ( debug_prev[10] !== debug_expected_prev[10] )
		&& ((debug_expected_prev[10] !== last_debug_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[10] = debug_expected_prev[10];
	end
	if (
		( debug_expected_prev[11] !== 1'bx ) && ( debug_prev[11] !== debug_expected_prev[11] )
		&& ((debug_expected_prev[11] !== last_debug_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[11] = debug_expected_prev[11];
	end
	if (
		( debug_expected_prev[12] !== 1'bx ) && ( debug_prev[12] !== debug_expected_prev[12] )
		&& ((debug_expected_prev[12] !== last_debug_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[12] = debug_expected_prev[12];
	end
	if (
		( debug_expected_prev[13] !== 1'bx ) && ( debug_prev[13] !== debug_expected_prev[13] )
		&& ((debug_expected_prev[13] !== last_debug_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[13] = debug_expected_prev[13];
	end
	if (
		( debug_expected_prev[14] !== 1'bx ) && ( debug_prev[14] !== debug_expected_prev[14] )
		&& ((debug_expected_prev[14] !== last_debug_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[14] = debug_expected_prev[14];
	end
	if (
		( debug_expected_prev[15] !== 1'bx ) && ( debug_prev[15] !== debug_expected_prev[15] )
		&& ((debug_expected_prev[15] !== last_debug_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[15] = debug_expected_prev[15];
	end
	if (
		( debug_expected_prev[16] !== 1'bx ) && ( debug_prev[16] !== debug_expected_prev[16] )
		&& ((debug_expected_prev[16] !== last_debug_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[16] = debug_expected_prev[16];
	end
	if (
		( debug_expected_prev[17] !== 1'bx ) && ( debug_prev[17] !== debug_expected_prev[17] )
		&& ((debug_expected_prev[17] !== last_debug_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[17] = debug_expected_prev[17];
	end
	if (
		( debug_expected_prev[18] !== 1'bx ) && ( debug_prev[18] !== debug_expected_prev[18] )
		&& ((debug_expected_prev[18] !== last_debug_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[18] = debug_expected_prev[18];
	end
	if (
		( debug_expected_prev[19] !== 1'bx ) && ( debug_prev[19] !== debug_expected_prev[19] )
		&& ((debug_expected_prev[19] !== last_debug_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[19] = debug_expected_prev[19];
	end
	if (
		( debug_expected_prev[20] !== 1'bx ) && ( debug_prev[20] !== debug_expected_prev[20] )
		&& ((debug_expected_prev[20] !== last_debug_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[20] = debug_expected_prev[20];
	end
	if (
		( debug_expected_prev[21] !== 1'bx ) && ( debug_prev[21] !== debug_expected_prev[21] )
		&& ((debug_expected_prev[21] !== last_debug_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[21] = debug_expected_prev[21];
	end
	if (
		( debug_expected_prev[22] !== 1'bx ) && ( debug_prev[22] !== debug_expected_prev[22] )
		&& ((debug_expected_prev[22] !== last_debug_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[22] = debug_expected_prev[22];
	end
	if (
		( debug_expected_prev[23] !== 1'bx ) && ( debug_prev[23] !== debug_expected_prev[23] )
		&& ((debug_expected_prev[23] !== last_debug_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[23] = debug_expected_prev[23];
	end
	if (
		( debug_expected_prev[24] !== 1'bx ) && ( debug_prev[24] !== debug_expected_prev[24] )
		&& ((debug_expected_prev[24] !== last_debug_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[24] = debug_expected_prev[24];
	end
	if (
		( debug_expected_prev[25] !== 1'bx ) && ( debug_prev[25] !== debug_expected_prev[25] )
		&& ((debug_expected_prev[25] !== last_debug_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[25] = debug_expected_prev[25];
	end
	if (
		( debug_expected_prev[26] !== 1'bx ) && ( debug_prev[26] !== debug_expected_prev[26] )
		&& ((debug_expected_prev[26] !== last_debug_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[26] = debug_expected_prev[26];
	end
	if (
		( debug_expected_prev[27] !== 1'bx ) && ( debug_prev[27] !== debug_expected_prev[27] )
		&& ((debug_expected_prev[27] !== last_debug_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[27] = debug_expected_prev[27];
	end
	if (
		( debug_expected_prev[28] !== 1'bx ) && ( debug_prev[28] !== debug_expected_prev[28] )
		&& ((debug_expected_prev[28] !== last_debug_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[28] = debug_expected_prev[28];
	end
	if (
		( debug_expected_prev[29] !== 1'bx ) && ( debug_prev[29] !== debug_expected_prev[29] )
		&& ((debug_expected_prev[29] !== last_debug_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[29] = debug_expected_prev[29];
	end
	if (
		( debug_expected_prev[30] !== 1'bx ) && ( debug_prev[30] !== debug_expected_prev[30] )
		&& ((debug_expected_prev[30] !== last_debug_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[30] = debug_expected_prev[30];
	end
	if (
		( debug_expected_prev[31] !== 1'bx ) && ( debug_prev[31] !== debug_expected_prev[31] )
		&& ((debug_expected_prev[31] !== last_debug_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_exp[31] = debug_expected_prev[31];
	end
	if (
		( immediate_expected_prev[0] !== 1'bx ) && ( immediate_prev[0] !== immediate_expected_prev[0] )
		&& ((immediate_expected_prev[0] !== last_immediate_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[0] = immediate_expected_prev[0];
	end
	if (
		( immediate_expected_prev[1] !== 1'bx ) && ( immediate_prev[1] !== immediate_expected_prev[1] )
		&& ((immediate_expected_prev[1] !== last_immediate_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[1] = immediate_expected_prev[1];
	end
	if (
		( immediate_expected_prev[2] !== 1'bx ) && ( immediate_prev[2] !== immediate_expected_prev[2] )
		&& ((immediate_expected_prev[2] !== last_immediate_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[2] = immediate_expected_prev[2];
	end
	if (
		( immediate_expected_prev[3] !== 1'bx ) && ( immediate_prev[3] !== immediate_expected_prev[3] )
		&& ((immediate_expected_prev[3] !== last_immediate_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[3] = immediate_expected_prev[3];
	end
	if (
		( immediate_expected_prev[4] !== 1'bx ) && ( immediate_prev[4] !== immediate_expected_prev[4] )
		&& ((immediate_expected_prev[4] !== last_immediate_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[4] = immediate_expected_prev[4];
	end
	if (
		( immediate_expected_prev[5] !== 1'bx ) && ( immediate_prev[5] !== immediate_expected_prev[5] )
		&& ((immediate_expected_prev[5] !== last_immediate_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[5] = immediate_expected_prev[5];
	end
	if (
		( immediate_expected_prev[6] !== 1'bx ) && ( immediate_prev[6] !== immediate_expected_prev[6] )
		&& ((immediate_expected_prev[6] !== last_immediate_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[6] = immediate_expected_prev[6];
	end
	if (
		( immediate_expected_prev[7] !== 1'bx ) && ( immediate_prev[7] !== immediate_expected_prev[7] )
		&& ((immediate_expected_prev[7] !== last_immediate_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[7] = immediate_expected_prev[7];
	end
	if (
		( immediate_expected_prev[8] !== 1'bx ) && ( immediate_prev[8] !== immediate_expected_prev[8] )
		&& ((immediate_expected_prev[8] !== last_immediate_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[8] = immediate_expected_prev[8];
	end
	if (
		( immediate_expected_prev[9] !== 1'bx ) && ( immediate_prev[9] !== immediate_expected_prev[9] )
		&& ((immediate_expected_prev[9] !== last_immediate_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[9] = immediate_expected_prev[9];
	end
	if (
		( immediate_expected_prev[10] !== 1'bx ) && ( immediate_prev[10] !== immediate_expected_prev[10] )
		&& ((immediate_expected_prev[10] !== last_immediate_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[10] = immediate_expected_prev[10];
	end
	if (
		( immediate_expected_prev[11] !== 1'bx ) && ( immediate_prev[11] !== immediate_expected_prev[11] )
		&& ((immediate_expected_prev[11] !== last_immediate_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[11] = immediate_expected_prev[11];
	end
	if (
		( immediate_expected_prev[12] !== 1'bx ) && ( immediate_prev[12] !== immediate_expected_prev[12] )
		&& ((immediate_expected_prev[12] !== last_immediate_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[12] = immediate_expected_prev[12];
	end
	if (
		( immediate_expected_prev[13] !== 1'bx ) && ( immediate_prev[13] !== immediate_expected_prev[13] )
		&& ((immediate_expected_prev[13] !== last_immediate_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[13] = immediate_expected_prev[13];
	end
	if (
		( immediate_expected_prev[14] !== 1'bx ) && ( immediate_prev[14] !== immediate_expected_prev[14] )
		&& ((immediate_expected_prev[14] !== last_immediate_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[14] = immediate_expected_prev[14];
	end
	if (
		( immediate_expected_prev[15] !== 1'bx ) && ( immediate_prev[15] !== immediate_expected_prev[15] )
		&& ((immediate_expected_prev[15] !== last_immediate_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[15] = immediate_expected_prev[15];
	end
	if (
		( immediate_expected_prev[16] !== 1'bx ) && ( immediate_prev[16] !== immediate_expected_prev[16] )
		&& ((immediate_expected_prev[16] !== last_immediate_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[16] = immediate_expected_prev[16];
	end
	if (
		( immediate_expected_prev[17] !== 1'bx ) && ( immediate_prev[17] !== immediate_expected_prev[17] )
		&& ((immediate_expected_prev[17] !== last_immediate_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[17] = immediate_expected_prev[17];
	end
	if (
		( immediate_expected_prev[18] !== 1'bx ) && ( immediate_prev[18] !== immediate_expected_prev[18] )
		&& ((immediate_expected_prev[18] !== last_immediate_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[18] = immediate_expected_prev[18];
	end
	if (
		( immediate_expected_prev[19] !== 1'bx ) && ( immediate_prev[19] !== immediate_expected_prev[19] )
		&& ((immediate_expected_prev[19] !== last_immediate_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[19] = immediate_expected_prev[19];
	end
	if (
		( immediate_expected_prev[20] !== 1'bx ) && ( immediate_prev[20] !== immediate_expected_prev[20] )
		&& ((immediate_expected_prev[20] !== last_immediate_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[20] = immediate_expected_prev[20];
	end
	if (
		( immediate_expected_prev[21] !== 1'bx ) && ( immediate_prev[21] !== immediate_expected_prev[21] )
		&& ((immediate_expected_prev[21] !== last_immediate_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[21] = immediate_expected_prev[21];
	end
	if (
		( immediate_expected_prev[22] !== 1'bx ) && ( immediate_prev[22] !== immediate_expected_prev[22] )
		&& ((immediate_expected_prev[22] !== last_immediate_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[22] = immediate_expected_prev[22];
	end
	if (
		( immediate_expected_prev[23] !== 1'bx ) && ( immediate_prev[23] !== immediate_expected_prev[23] )
		&& ((immediate_expected_prev[23] !== last_immediate_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[23] = immediate_expected_prev[23];
	end
	if (
		( immediate_expected_prev[24] !== 1'bx ) && ( immediate_prev[24] !== immediate_expected_prev[24] )
		&& ((immediate_expected_prev[24] !== last_immediate_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[24] = immediate_expected_prev[24];
	end
	if (
		( immediate_expected_prev[25] !== 1'bx ) && ( immediate_prev[25] !== immediate_expected_prev[25] )
		&& ((immediate_expected_prev[25] !== last_immediate_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[25] = immediate_expected_prev[25];
	end
	if (
		( immediate_expected_prev[26] !== 1'bx ) && ( immediate_prev[26] !== immediate_expected_prev[26] )
		&& ((immediate_expected_prev[26] !== last_immediate_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[26] = immediate_expected_prev[26];
	end
	if (
		( immediate_expected_prev[27] !== 1'bx ) && ( immediate_prev[27] !== immediate_expected_prev[27] )
		&& ((immediate_expected_prev[27] !== last_immediate_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[27] = immediate_expected_prev[27];
	end
	if (
		( immediate_expected_prev[28] !== 1'bx ) && ( immediate_prev[28] !== immediate_expected_prev[28] )
		&& ((immediate_expected_prev[28] !== last_immediate_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[28] = immediate_expected_prev[28];
	end
	if (
		( immediate_expected_prev[29] !== 1'bx ) && ( immediate_prev[29] !== immediate_expected_prev[29] )
		&& ((immediate_expected_prev[29] !== last_immediate_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[29] = immediate_expected_prev[29];
	end
	if (
		( immediate_expected_prev[30] !== 1'bx ) && ( immediate_prev[30] !== immediate_expected_prev[30] )
		&& ((immediate_expected_prev[30] !== last_immediate_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[30] = immediate_expected_prev[30];
	end
	if (
		( immediate_expected_prev[31] !== 1'bx ) && ( immediate_prev[31] !== immediate_expected_prev[31] )
		&& ((immediate_expected_prev[31] !== last_immediate_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate_expected_prev);
		$display ("     Real value = %b", immediate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate_exp[31] = immediate_expected_prev[31];
	end
	if (
		( instruction_expected_prev[0] !== 1'bx ) && ( instruction_prev[0] !== instruction_expected_prev[0] )
		&& ((instruction_expected_prev[0] !== last_instruction_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[0] = instruction_expected_prev[0];
	end
	if (
		( instruction_expected_prev[1] !== 1'bx ) && ( instruction_prev[1] !== instruction_expected_prev[1] )
		&& ((instruction_expected_prev[1] !== last_instruction_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[1] = instruction_expected_prev[1];
	end
	if (
		( instruction_expected_prev[2] !== 1'bx ) && ( instruction_prev[2] !== instruction_expected_prev[2] )
		&& ((instruction_expected_prev[2] !== last_instruction_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[2] = instruction_expected_prev[2];
	end
	if (
		( instruction_expected_prev[3] !== 1'bx ) && ( instruction_prev[3] !== instruction_expected_prev[3] )
		&& ((instruction_expected_prev[3] !== last_instruction_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[3] = instruction_expected_prev[3];
	end
	if (
		( instruction_expected_prev[4] !== 1'bx ) && ( instruction_prev[4] !== instruction_expected_prev[4] )
		&& ((instruction_expected_prev[4] !== last_instruction_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[4] = instruction_expected_prev[4];
	end
	if (
		( instruction_expected_prev[5] !== 1'bx ) && ( instruction_prev[5] !== instruction_expected_prev[5] )
		&& ((instruction_expected_prev[5] !== last_instruction_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[5] = instruction_expected_prev[5];
	end
	if (
		( instruction_expected_prev[6] !== 1'bx ) && ( instruction_prev[6] !== instruction_expected_prev[6] )
		&& ((instruction_expected_prev[6] !== last_instruction_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[6] = instruction_expected_prev[6];
	end
	if (
		( instruction_expected_prev[7] !== 1'bx ) && ( instruction_prev[7] !== instruction_expected_prev[7] )
		&& ((instruction_expected_prev[7] !== last_instruction_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[7] = instruction_expected_prev[7];
	end
	if (
		( instruction_expected_prev[8] !== 1'bx ) && ( instruction_prev[8] !== instruction_expected_prev[8] )
		&& ((instruction_expected_prev[8] !== last_instruction_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[8] = instruction_expected_prev[8];
	end
	if (
		( instruction_expected_prev[9] !== 1'bx ) && ( instruction_prev[9] !== instruction_expected_prev[9] )
		&& ((instruction_expected_prev[9] !== last_instruction_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[9] = instruction_expected_prev[9];
	end
	if (
		( instruction_expected_prev[10] !== 1'bx ) && ( instruction_prev[10] !== instruction_expected_prev[10] )
		&& ((instruction_expected_prev[10] !== last_instruction_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[10] = instruction_expected_prev[10];
	end
	if (
		( instruction_expected_prev[11] !== 1'bx ) && ( instruction_prev[11] !== instruction_expected_prev[11] )
		&& ((instruction_expected_prev[11] !== last_instruction_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[11] = instruction_expected_prev[11];
	end
	if (
		( instruction_expected_prev[12] !== 1'bx ) && ( instruction_prev[12] !== instruction_expected_prev[12] )
		&& ((instruction_expected_prev[12] !== last_instruction_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[12] = instruction_expected_prev[12];
	end
	if (
		( instruction_expected_prev[13] !== 1'bx ) && ( instruction_prev[13] !== instruction_expected_prev[13] )
		&& ((instruction_expected_prev[13] !== last_instruction_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[13] = instruction_expected_prev[13];
	end
	if (
		( instruction_expected_prev[14] !== 1'bx ) && ( instruction_prev[14] !== instruction_expected_prev[14] )
		&& ((instruction_expected_prev[14] !== last_instruction_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[14] = instruction_expected_prev[14];
	end
	if (
		( instruction_expected_prev[15] !== 1'bx ) && ( instruction_prev[15] !== instruction_expected_prev[15] )
		&& ((instruction_expected_prev[15] !== last_instruction_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[15] = instruction_expected_prev[15];
	end
	if (
		( instruction_expected_prev[16] !== 1'bx ) && ( instruction_prev[16] !== instruction_expected_prev[16] )
		&& ((instruction_expected_prev[16] !== last_instruction_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[16] = instruction_expected_prev[16];
	end
	if (
		( instruction_expected_prev[17] !== 1'bx ) && ( instruction_prev[17] !== instruction_expected_prev[17] )
		&& ((instruction_expected_prev[17] !== last_instruction_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[17] = instruction_expected_prev[17];
	end
	if (
		( instruction_expected_prev[18] !== 1'bx ) && ( instruction_prev[18] !== instruction_expected_prev[18] )
		&& ((instruction_expected_prev[18] !== last_instruction_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[18] = instruction_expected_prev[18];
	end
	if (
		( instruction_expected_prev[19] !== 1'bx ) && ( instruction_prev[19] !== instruction_expected_prev[19] )
		&& ((instruction_expected_prev[19] !== last_instruction_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[19] = instruction_expected_prev[19];
	end
	if (
		( instruction_expected_prev[20] !== 1'bx ) && ( instruction_prev[20] !== instruction_expected_prev[20] )
		&& ((instruction_expected_prev[20] !== last_instruction_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[20] = instruction_expected_prev[20];
	end
	if (
		( instruction_expected_prev[21] !== 1'bx ) && ( instruction_prev[21] !== instruction_expected_prev[21] )
		&& ((instruction_expected_prev[21] !== last_instruction_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[21] = instruction_expected_prev[21];
	end
	if (
		( instruction_expected_prev[22] !== 1'bx ) && ( instruction_prev[22] !== instruction_expected_prev[22] )
		&& ((instruction_expected_prev[22] !== last_instruction_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[22] = instruction_expected_prev[22];
	end
	if (
		( instruction_expected_prev[23] !== 1'bx ) && ( instruction_prev[23] !== instruction_expected_prev[23] )
		&& ((instruction_expected_prev[23] !== last_instruction_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[23] = instruction_expected_prev[23];
	end
	if (
		( instruction_expected_prev[24] !== 1'bx ) && ( instruction_prev[24] !== instruction_expected_prev[24] )
		&& ((instruction_expected_prev[24] !== last_instruction_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[24] = instruction_expected_prev[24];
	end
	if (
		( instruction_expected_prev[25] !== 1'bx ) && ( instruction_prev[25] !== instruction_expected_prev[25] )
		&& ((instruction_expected_prev[25] !== last_instruction_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[25] = instruction_expected_prev[25];
	end
	if (
		( instruction_expected_prev[26] !== 1'bx ) && ( instruction_prev[26] !== instruction_expected_prev[26] )
		&& ((instruction_expected_prev[26] !== last_instruction_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[26] = instruction_expected_prev[26];
	end
	if (
		( instruction_expected_prev[27] !== 1'bx ) && ( instruction_prev[27] !== instruction_expected_prev[27] )
		&& ((instruction_expected_prev[27] !== last_instruction_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[27] = instruction_expected_prev[27];
	end
	if (
		( instruction_expected_prev[28] !== 1'bx ) && ( instruction_prev[28] !== instruction_expected_prev[28] )
		&& ((instruction_expected_prev[28] !== last_instruction_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[28] = instruction_expected_prev[28];
	end
	if (
		( instruction_expected_prev[29] !== 1'bx ) && ( instruction_prev[29] !== instruction_expected_prev[29] )
		&& ((instruction_expected_prev[29] !== last_instruction_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[29] = instruction_expected_prev[29];
	end
	if (
		( instruction_expected_prev[30] !== 1'bx ) && ( instruction_prev[30] !== instruction_expected_prev[30] )
		&& ((instruction_expected_prev[30] !== last_instruction_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[30] = instruction_expected_prev[30];
	end
	if (
		( instruction_expected_prev[31] !== 1'bx ) && ( instruction_prev[31] !== instruction_expected_prev[31] )
		&& ((instruction_expected_prev[31] !== last_instruction_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[31] = instruction_expected_prev[31];
	end
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( opcode_expected_prev[2] !== 1'bx ) && ( opcode_prev[2] !== opcode_expected_prev[2] )
		&& ((opcode_expected_prev[2] !== last_opcode_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[2] = opcode_expected_prev[2];
	end
	if (
		( opcode_expected_prev[3] !== 1'bx ) && ( opcode_prev[3] !== opcode_expected_prev[3] )
		&& ((opcode_expected_prev[3] !== last_opcode_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[3] = opcode_expected_prev[3];
	end
	if (
		( opcode_expected_prev[4] !== 1'bx ) && ( opcode_prev[4] !== opcode_expected_prev[4] )
		&& ((opcode_expected_prev[4] !== last_opcode_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[4] = opcode_expected_prev[4];
	end
	if (
		( opcode_expected_prev[5] !== 1'bx ) && ( opcode_prev[5] !== opcode_expected_prev[5] )
		&& ((opcode_expected_prev[5] !== last_opcode_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[5] = opcode_expected_prev[5];
	end
	if (
		( opcode_expected_prev[6] !== 1'bx ) && ( opcode_prev[6] !== opcode_expected_prev[6] )
		&& ((opcode_expected_prev[6] !== last_opcode_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[6] = opcode_expected_prev[6];
	end
	if (
		( opcode_expected_prev[7] !== 1'bx ) && ( opcode_prev[7] !== opcode_expected_prev[7] )
		&& ((opcode_expected_prev[7] !== last_opcode_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_opcode_exp[7] = opcode_expected_prev[7];
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end
	if (
		( pc_expected_prev[8] !== 1'bx ) && ( pc_prev[8] !== pc_expected_prev[8] )
		&& ((pc_expected_prev[8] !== last_pc_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[8] = pc_expected_prev[8];
	end
	if (
		( pc_expected_prev[9] !== 1'bx ) && ( pc_prev[9] !== pc_expected_prev[9] )
		&& ((pc_expected_prev[9] !== last_pc_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[9] = pc_expected_prev[9];
	end
	if (
		( pc_expected_prev[10] !== 1'bx ) && ( pc_prev[10] !== pc_expected_prev[10] )
		&& ((pc_expected_prev[10] !== last_pc_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[10] = pc_expected_prev[10];
	end
	if (
		( pc_expected_prev[11] !== 1'bx ) && ( pc_prev[11] !== pc_expected_prev[11] )
		&& ((pc_expected_prev[11] !== last_pc_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[11] = pc_expected_prev[11];
	end
	if (
		( pc_expected_prev[12] !== 1'bx ) && ( pc_prev[12] !== pc_expected_prev[12] )
		&& ((pc_expected_prev[12] !== last_pc_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[12] = pc_expected_prev[12];
	end
	if (
		( pc_expected_prev[13] !== 1'bx ) && ( pc_prev[13] !== pc_expected_prev[13] )
		&& ((pc_expected_prev[13] !== last_pc_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[13] = pc_expected_prev[13];
	end
	if (
		( pc_expected_prev[14] !== 1'bx ) && ( pc_prev[14] !== pc_expected_prev[14] )
		&& ((pc_expected_prev[14] !== last_pc_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[14] = pc_expected_prev[14];
	end
	if (
		( pc_expected_prev[15] !== 1'bx ) && ( pc_prev[15] !== pc_expected_prev[15] )
		&& ((pc_expected_prev[15] !== last_pc_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[15] = pc_expected_prev[15];
	end
	if (
		( pc_expected_prev[16] !== 1'bx ) && ( pc_prev[16] !== pc_expected_prev[16] )
		&& ((pc_expected_prev[16] !== last_pc_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[16] = pc_expected_prev[16];
	end
	if (
		( pc_expected_prev[17] !== 1'bx ) && ( pc_prev[17] !== pc_expected_prev[17] )
		&& ((pc_expected_prev[17] !== last_pc_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[17] = pc_expected_prev[17];
	end
	if (
		( pc_expected_prev[18] !== 1'bx ) && ( pc_prev[18] !== pc_expected_prev[18] )
		&& ((pc_expected_prev[18] !== last_pc_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[18] = pc_expected_prev[18];
	end
	if (
		( pc_expected_prev[19] !== 1'bx ) && ( pc_prev[19] !== pc_expected_prev[19] )
		&& ((pc_expected_prev[19] !== last_pc_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[19] = pc_expected_prev[19];
	end
	if (
		( pc_expected_prev[20] !== 1'bx ) && ( pc_prev[20] !== pc_expected_prev[20] )
		&& ((pc_expected_prev[20] !== last_pc_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[20] = pc_expected_prev[20];
	end
	if (
		( pc_expected_prev[21] !== 1'bx ) && ( pc_prev[21] !== pc_expected_prev[21] )
		&& ((pc_expected_prev[21] !== last_pc_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[21] = pc_expected_prev[21];
	end
	if (
		( pc_expected_prev[22] !== 1'bx ) && ( pc_prev[22] !== pc_expected_prev[22] )
		&& ((pc_expected_prev[22] !== last_pc_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[22] = pc_expected_prev[22];
	end
	if (
		( pc_expected_prev[23] !== 1'bx ) && ( pc_prev[23] !== pc_expected_prev[23] )
		&& ((pc_expected_prev[23] !== last_pc_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[23] = pc_expected_prev[23];
	end
	if (
		( pc_expected_prev[24] !== 1'bx ) && ( pc_prev[24] !== pc_expected_prev[24] )
		&& ((pc_expected_prev[24] !== last_pc_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[24] = pc_expected_prev[24];
	end
	if (
		( pc_expected_prev[25] !== 1'bx ) && ( pc_prev[25] !== pc_expected_prev[25] )
		&& ((pc_expected_prev[25] !== last_pc_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[25] = pc_expected_prev[25];
	end
	if (
		( pc_expected_prev[26] !== 1'bx ) && ( pc_prev[26] !== pc_expected_prev[26] )
		&& ((pc_expected_prev[26] !== last_pc_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[26] = pc_expected_prev[26];
	end
	if (
		( pc_expected_prev[27] !== 1'bx ) && ( pc_prev[27] !== pc_expected_prev[27] )
		&& ((pc_expected_prev[27] !== last_pc_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[27] = pc_expected_prev[27];
	end
	if (
		( pc_expected_prev[28] !== 1'bx ) && ( pc_prev[28] !== pc_expected_prev[28] )
		&& ((pc_expected_prev[28] !== last_pc_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[28] = pc_expected_prev[28];
	end
	if (
		( pc_expected_prev[29] !== 1'bx ) && ( pc_prev[29] !== pc_expected_prev[29] )
		&& ((pc_expected_prev[29] !== last_pc_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[29] = pc_expected_prev[29];
	end
	if (
		( pc_expected_prev[30] !== 1'bx ) && ( pc_prev[30] !== pc_expected_prev[30] )
		&& ((pc_expected_prev[30] !== last_pc_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[30] = pc_expected_prev[30];
	end
	if (
		( pc_expected_prev[31] !== 1'bx ) && ( pc_prev[31] !== pc_expected_prev[31] )
		&& ((pc_expected_prev[31] !== last_pc_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[31] = pc_expected_prev[31];
	end
	if (
		( regA_expected_prev[0] !== 1'bx ) && ( regA_prev[0] !== regA_expected_prev[0] )
		&& ((regA_expected_prev[0] !== last_regA_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[0] = regA_expected_prev[0];
	end
	if (
		( regA_expected_prev[1] !== 1'bx ) && ( regA_prev[1] !== regA_expected_prev[1] )
		&& ((regA_expected_prev[1] !== last_regA_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[1] = regA_expected_prev[1];
	end
	if (
		( regA_expected_prev[2] !== 1'bx ) && ( regA_prev[2] !== regA_expected_prev[2] )
		&& ((regA_expected_prev[2] !== last_regA_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[2] = regA_expected_prev[2];
	end
	if (
		( regA_expected_prev[3] !== 1'bx ) && ( regA_prev[3] !== regA_expected_prev[3] )
		&& ((regA_expected_prev[3] !== last_regA_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[3] = regA_expected_prev[3];
	end
	if (
		( regA_expected_prev[4] !== 1'bx ) && ( regA_prev[4] !== regA_expected_prev[4] )
		&& ((regA_expected_prev[4] !== last_regA_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[4] = regA_expected_prev[4];
	end
	if (
		( regA_expected_prev[5] !== 1'bx ) && ( regA_prev[5] !== regA_expected_prev[5] )
		&& ((regA_expected_prev[5] !== last_regA_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[5] = regA_expected_prev[5];
	end
	if (
		( regA_expected_prev[6] !== 1'bx ) && ( regA_prev[6] !== regA_expected_prev[6] )
		&& ((regA_expected_prev[6] !== last_regA_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[6] = regA_expected_prev[6];
	end
	if (
		( regA_expected_prev[7] !== 1'bx ) && ( regA_prev[7] !== regA_expected_prev[7] )
		&& ((regA_expected_prev[7] !== last_regA_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[7] = regA_expected_prev[7];
	end
	if (
		( regA_expected_prev[8] !== 1'bx ) && ( regA_prev[8] !== regA_expected_prev[8] )
		&& ((regA_expected_prev[8] !== last_regA_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[8] = regA_expected_prev[8];
	end
	if (
		( regA_expected_prev[9] !== 1'bx ) && ( regA_prev[9] !== regA_expected_prev[9] )
		&& ((regA_expected_prev[9] !== last_regA_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[9] = regA_expected_prev[9];
	end
	if (
		( regA_expected_prev[10] !== 1'bx ) && ( regA_prev[10] !== regA_expected_prev[10] )
		&& ((regA_expected_prev[10] !== last_regA_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[10] = regA_expected_prev[10];
	end
	if (
		( regA_expected_prev[11] !== 1'bx ) && ( regA_prev[11] !== regA_expected_prev[11] )
		&& ((regA_expected_prev[11] !== last_regA_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[11] = regA_expected_prev[11];
	end
	if (
		( regA_expected_prev[12] !== 1'bx ) && ( regA_prev[12] !== regA_expected_prev[12] )
		&& ((regA_expected_prev[12] !== last_regA_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[12] = regA_expected_prev[12];
	end
	if (
		( regA_expected_prev[13] !== 1'bx ) && ( regA_prev[13] !== regA_expected_prev[13] )
		&& ((regA_expected_prev[13] !== last_regA_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[13] = regA_expected_prev[13];
	end
	if (
		( regA_expected_prev[14] !== 1'bx ) && ( regA_prev[14] !== regA_expected_prev[14] )
		&& ((regA_expected_prev[14] !== last_regA_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[14] = regA_expected_prev[14];
	end
	if (
		( regA_expected_prev[15] !== 1'bx ) && ( regA_prev[15] !== regA_expected_prev[15] )
		&& ((regA_expected_prev[15] !== last_regA_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[15] = regA_expected_prev[15];
	end
	if (
		( regA_expected_prev[16] !== 1'bx ) && ( regA_prev[16] !== regA_expected_prev[16] )
		&& ((regA_expected_prev[16] !== last_regA_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[16] = regA_expected_prev[16];
	end
	if (
		( regA_expected_prev[17] !== 1'bx ) && ( regA_prev[17] !== regA_expected_prev[17] )
		&& ((regA_expected_prev[17] !== last_regA_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[17] = regA_expected_prev[17];
	end
	if (
		( regA_expected_prev[18] !== 1'bx ) && ( regA_prev[18] !== regA_expected_prev[18] )
		&& ((regA_expected_prev[18] !== last_regA_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[18] = regA_expected_prev[18];
	end
	if (
		( regA_expected_prev[19] !== 1'bx ) && ( regA_prev[19] !== regA_expected_prev[19] )
		&& ((regA_expected_prev[19] !== last_regA_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[19] = regA_expected_prev[19];
	end
	if (
		( regA_expected_prev[20] !== 1'bx ) && ( regA_prev[20] !== regA_expected_prev[20] )
		&& ((regA_expected_prev[20] !== last_regA_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[20] = regA_expected_prev[20];
	end
	if (
		( regA_expected_prev[21] !== 1'bx ) && ( regA_prev[21] !== regA_expected_prev[21] )
		&& ((regA_expected_prev[21] !== last_regA_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[21] = regA_expected_prev[21];
	end
	if (
		( regA_expected_prev[22] !== 1'bx ) && ( regA_prev[22] !== regA_expected_prev[22] )
		&& ((regA_expected_prev[22] !== last_regA_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[22] = regA_expected_prev[22];
	end
	if (
		( regA_expected_prev[23] !== 1'bx ) && ( regA_prev[23] !== regA_expected_prev[23] )
		&& ((regA_expected_prev[23] !== last_regA_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[23] = regA_expected_prev[23];
	end
	if (
		( regA_expected_prev[24] !== 1'bx ) && ( regA_prev[24] !== regA_expected_prev[24] )
		&& ((regA_expected_prev[24] !== last_regA_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[24] = regA_expected_prev[24];
	end
	if (
		( regA_expected_prev[25] !== 1'bx ) && ( regA_prev[25] !== regA_expected_prev[25] )
		&& ((regA_expected_prev[25] !== last_regA_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[25] = regA_expected_prev[25];
	end
	if (
		( regA_expected_prev[26] !== 1'bx ) && ( regA_prev[26] !== regA_expected_prev[26] )
		&& ((regA_expected_prev[26] !== last_regA_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[26] = regA_expected_prev[26];
	end
	if (
		( regA_expected_prev[27] !== 1'bx ) && ( regA_prev[27] !== regA_expected_prev[27] )
		&& ((regA_expected_prev[27] !== last_regA_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[27] = regA_expected_prev[27];
	end
	if (
		( regA_expected_prev[28] !== 1'bx ) && ( regA_prev[28] !== regA_expected_prev[28] )
		&& ((regA_expected_prev[28] !== last_regA_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[28] = regA_expected_prev[28];
	end
	if (
		( regA_expected_prev[29] !== 1'bx ) && ( regA_prev[29] !== regA_expected_prev[29] )
		&& ((regA_expected_prev[29] !== last_regA_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[29] = regA_expected_prev[29];
	end
	if (
		( regA_expected_prev[30] !== 1'bx ) && ( regA_prev[30] !== regA_expected_prev[30] )
		&& ((regA_expected_prev[30] !== last_regA_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[30] = regA_expected_prev[30];
	end
	if (
		( regA_expected_prev[31] !== 1'bx ) && ( regA_prev[31] !== regA_expected_prev[31] )
		&& ((regA_expected_prev[31] !== last_regA_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regA_expected_prev);
		$display ("     Real value = %b", regA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_regA_exp[31] = regA_expected_prev[31];
	end
	if (
		( regB_expected_prev[0] !== 1'bx ) && ( regB_prev[0] !== regB_expected_prev[0] )
		&& ((regB_expected_prev[0] !== last_regB_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[0] = regB_expected_prev[0];
	end
	if (
		( regB_expected_prev[1] !== 1'bx ) && ( regB_prev[1] !== regB_expected_prev[1] )
		&& ((regB_expected_prev[1] !== last_regB_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[1] = regB_expected_prev[1];
	end
	if (
		( regB_expected_prev[2] !== 1'bx ) && ( regB_prev[2] !== regB_expected_prev[2] )
		&& ((regB_expected_prev[2] !== last_regB_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[2] = regB_expected_prev[2];
	end
	if (
		( regB_expected_prev[3] !== 1'bx ) && ( regB_prev[3] !== regB_expected_prev[3] )
		&& ((regB_expected_prev[3] !== last_regB_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[3] = regB_expected_prev[3];
	end
	if (
		( regB_expected_prev[4] !== 1'bx ) && ( regB_prev[4] !== regB_expected_prev[4] )
		&& ((regB_expected_prev[4] !== last_regB_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[4] = regB_expected_prev[4];
	end
	if (
		( regB_expected_prev[5] !== 1'bx ) && ( regB_prev[5] !== regB_expected_prev[5] )
		&& ((regB_expected_prev[5] !== last_regB_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[5] = regB_expected_prev[5];
	end
	if (
		( regB_expected_prev[6] !== 1'bx ) && ( regB_prev[6] !== regB_expected_prev[6] )
		&& ((regB_expected_prev[6] !== last_regB_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[6] = regB_expected_prev[6];
	end
	if (
		( regB_expected_prev[7] !== 1'bx ) && ( regB_prev[7] !== regB_expected_prev[7] )
		&& ((regB_expected_prev[7] !== last_regB_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[7] = regB_expected_prev[7];
	end
	if (
		( regB_expected_prev[8] !== 1'bx ) && ( regB_prev[8] !== regB_expected_prev[8] )
		&& ((regB_expected_prev[8] !== last_regB_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[8] = regB_expected_prev[8];
	end
	if (
		( regB_expected_prev[9] !== 1'bx ) && ( regB_prev[9] !== regB_expected_prev[9] )
		&& ((regB_expected_prev[9] !== last_regB_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[9] = regB_expected_prev[9];
	end
	if (
		( regB_expected_prev[10] !== 1'bx ) && ( regB_prev[10] !== regB_expected_prev[10] )
		&& ((regB_expected_prev[10] !== last_regB_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[10] = regB_expected_prev[10];
	end
	if (
		( regB_expected_prev[11] !== 1'bx ) && ( regB_prev[11] !== regB_expected_prev[11] )
		&& ((regB_expected_prev[11] !== last_regB_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[11] = regB_expected_prev[11];
	end
	if (
		( regB_expected_prev[12] !== 1'bx ) && ( regB_prev[12] !== regB_expected_prev[12] )
		&& ((regB_expected_prev[12] !== last_regB_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[12] = regB_expected_prev[12];
	end
	if (
		( regB_expected_prev[13] !== 1'bx ) && ( regB_prev[13] !== regB_expected_prev[13] )
		&& ((regB_expected_prev[13] !== last_regB_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[13] = regB_expected_prev[13];
	end
	if (
		( regB_expected_prev[14] !== 1'bx ) && ( regB_prev[14] !== regB_expected_prev[14] )
		&& ((regB_expected_prev[14] !== last_regB_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[14] = regB_expected_prev[14];
	end
	if (
		( regB_expected_prev[15] !== 1'bx ) && ( regB_prev[15] !== regB_expected_prev[15] )
		&& ((regB_expected_prev[15] !== last_regB_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[15] = regB_expected_prev[15];
	end
	if (
		( regB_expected_prev[16] !== 1'bx ) && ( regB_prev[16] !== regB_expected_prev[16] )
		&& ((regB_expected_prev[16] !== last_regB_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[16] = regB_expected_prev[16];
	end
	if (
		( regB_expected_prev[17] !== 1'bx ) && ( regB_prev[17] !== regB_expected_prev[17] )
		&& ((regB_expected_prev[17] !== last_regB_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[17] = regB_expected_prev[17];
	end
	if (
		( regB_expected_prev[18] !== 1'bx ) && ( regB_prev[18] !== regB_expected_prev[18] )
		&& ((regB_expected_prev[18] !== last_regB_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[18] = regB_expected_prev[18];
	end
	if (
		( regB_expected_prev[19] !== 1'bx ) && ( regB_prev[19] !== regB_expected_prev[19] )
		&& ((regB_expected_prev[19] !== last_regB_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[19] = regB_expected_prev[19];
	end
	if (
		( regB_expected_prev[20] !== 1'bx ) && ( regB_prev[20] !== regB_expected_prev[20] )
		&& ((regB_expected_prev[20] !== last_regB_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[20] = regB_expected_prev[20];
	end
	if (
		( regB_expected_prev[21] !== 1'bx ) && ( regB_prev[21] !== regB_expected_prev[21] )
		&& ((regB_expected_prev[21] !== last_regB_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[21] = regB_expected_prev[21];
	end
	if (
		( regB_expected_prev[22] !== 1'bx ) && ( regB_prev[22] !== regB_expected_prev[22] )
		&& ((regB_expected_prev[22] !== last_regB_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[22] = regB_expected_prev[22];
	end
	if (
		( regB_expected_prev[23] !== 1'bx ) && ( regB_prev[23] !== regB_expected_prev[23] )
		&& ((regB_expected_prev[23] !== last_regB_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[23] = regB_expected_prev[23];
	end
	if (
		( regB_expected_prev[24] !== 1'bx ) && ( regB_prev[24] !== regB_expected_prev[24] )
		&& ((regB_expected_prev[24] !== last_regB_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[24] = regB_expected_prev[24];
	end
	if (
		( regB_expected_prev[25] !== 1'bx ) && ( regB_prev[25] !== regB_expected_prev[25] )
		&& ((regB_expected_prev[25] !== last_regB_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[25] = regB_expected_prev[25];
	end
	if (
		( regB_expected_prev[26] !== 1'bx ) && ( regB_prev[26] !== regB_expected_prev[26] )
		&& ((regB_expected_prev[26] !== last_regB_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[26] = regB_expected_prev[26];
	end
	if (
		( regB_expected_prev[27] !== 1'bx ) && ( regB_prev[27] !== regB_expected_prev[27] )
		&& ((regB_expected_prev[27] !== last_regB_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[27] = regB_expected_prev[27];
	end
	if (
		( regB_expected_prev[28] !== 1'bx ) && ( regB_prev[28] !== regB_expected_prev[28] )
		&& ((regB_expected_prev[28] !== last_regB_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[28] = regB_expected_prev[28];
	end
	if (
		( regB_expected_prev[29] !== 1'bx ) && ( regB_prev[29] !== regB_expected_prev[29] )
		&& ((regB_expected_prev[29] !== last_regB_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[29] = regB_expected_prev[29];
	end
	if (
		( regB_expected_prev[30] !== 1'bx ) && ( regB_prev[30] !== regB_expected_prev[30] )
		&& ((regB_expected_prev[30] !== last_regB_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[30] = regB_expected_prev[30];
	end
	if (
		( regB_expected_prev[31] !== 1'bx ) && ( regB_prev[31] !== regB_expected_prev[31] )
		&& ((regB_expected_prev[31] !== last_regB_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regB_expected_prev);
		$display ("     Real value = %b", regB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_regB_exp[31] = regB_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module quanta2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [31:0] ALUResult;
wire [31:0] debug;
wire [31:0] immediate;
wire [31:0] instruction;
wire [7:0] opcode;
wire [31:0] pc;
wire [31:0] regA;
wire [31:0] regB;

wire sampler;                             

// assign statements (if any)                          
quanta2 i1 (
// port map - connection between master ports and signals/registers   
	.ALUResult(ALUResult),
	.clk(clk),
	.debug(debug),
	.immediate(immediate),
	.instruction(instruction),
	.opcode(opcode),
	.pc(pc),
	.regA(regA),
	.regB(regB)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

quanta2_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

quanta2_vlg_check_tst tb_out(
	.ALUResult(ALUResult),
	.debug(debug),
	.immediate(immediate),
	.instruction(instruction),
	.opcode(opcode),
	.pc(pc),
	.regA(regA),
	.regB(regB),
	.sampler_rx(sampler)
);
endmodule

